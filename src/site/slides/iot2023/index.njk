---
layout: layouts/presentation.njk
title: "SemBeacon: A Semantic Proximity Beacon Solution for Discovering and Detecting the Position of Physical Things"
presentation_title: "SemBeacon: A Semantic Proximity Beacon Solution for Discovering and Detecting the Position of Physical Things"
author: <u>Maxim Van de Wynckel</u>, Beat Signer
affiliation: Web & Information Systems Engineering Lab</br>Vrije Universiteit Brussel
logo: true
width: 1280
height: 720
---
{% decktape title, page %}

<!--
    Hello, my name is Maxim Van de Wynckel. I am a PhD candidate at the Web and Information Systems
    engineering lab at the Vrije Universiteit Brussel. Today I will be presenting our paper,
    'SemBeacon: A semantic proximity beacon solution for discovering and detecting the position of physical things'
-->

<section data-markdown data-timing="25">
    {% markdown %}
        ## Overview
        *"A Physical Thing is an abstraction of a **physical** entity that provides **interactions** to and participates in the Web of Things"* \
        <small>- W3C Web of Things (WoT) Thing Description 1.1</small>
        ![](./images/layers.svg){ width=80% }
    {% endmarkdown %}
    <aside class="notes">
         To give a brief overview of where we situate physical things within the domain of internet of things. The world wide
         web concortium describes a physical 'Thing' as an abstraction of a phsyical entity that provides interactions "to"
         and participates "in" the web of things. The web of things as a layer itself is situated on top of the internet of things
         and primarily communicates over HTTP.
    </aside>
</section>

<section data-markdown data-timing="35">
    {% markdown %}
        ## Problem Statement
        *"How to discover and track Physical Things indoors?"*
    {% endmarkdown %}
    <aside class="notes">
        When we strictly talk about physical things that we can interact with, we have one main problem. Mainly,
        that we should somehow discover these physical devices and track their location so we can also
        physically interact with them when needed. Discovering a physical device is more than simply knowing
        that it exist.

        If we look at existing solutions to this problem in the scope of the Web of Things we often found solutions
        that rely on a predefined method of centralisation such as a web service or knowledge database. But even then,
        tracking its location within an complex environment such as indoors is not fully discussed.
    </aside>
</section>

<section data-markdown data-timing="20">
    {% markdown %}
        ## Table of Contents
        1.  Related Work and Specifications
        2.  SemBeacon Solution
        3.  Demonstrator and Supplemental Material
        4.  Conclusions and Future Work
    {% endmarkdown %}
    <aside class="notes">
        For our presentation we will first discuss the related work and Specifications
        that insipired our SemBeacon solution. Next we will introduce our solution followed by
        the demonstrator we have used within the paper and an overview of the supplemental materials
        along its relevancy for future work.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## Related Work
        <div class="row">
            <div class="col-4">
                <img src="images/hpcooltown.jpg" width="95%">
                <small>- HP CoolTown Beacon (2000) [26]</small>
            </div>
            <div class="col-7">
                <img src="images/lee2017.jpg" width="100%">
                <small>- Location-based service using ontology-based semantic queries (2017) [18]</small>
            </div>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        If we look back at the early 2000's, Hewelett Packard started the CoolTown project. Part of this project was the creation of
        URI beacons which were infrared transmitters of uniform resource identifiers. This URI would then lead to an XML description
        of the location or place. Despite the hardware limitations back in the day, this solution tries to solve
        our problem by putting the description online and transmitting this to the user. However, the XML vocabulary
        was specific to the CoolTown project and only one URI was used to describe the place.

        Other examples that more closely resemble the problem we are trying to solve use an object relational
        database system on the web that can be accessed by mobile clients. These clients can query the database to retrieve
        geospatial information about the environment which can be used to offer indoor positioning.
        While these solutions offer the ability to create interoperable applications, especially when used with common vocabularies --
        it still requires knowledge on the location of the server. If we would make an open world assumption where these geometry
        and topology models are decentralised, we would require large semantic queries over unknown multiple servers, which is currently
        a huge bottleneck in linked data.
    </aside>
</section>
<section data-markdown>
    {% markdown %}
        ## Related Work ...
        <div class="row">
            <div class="col-12">
                <img src="images/physicalweb_architecture.png" width="60%">
                <small>- Manfred Sneps-Sneppe, Dmitry Namiot, "On Physical Web models" (2016)</small>
            </div>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        In 2014, Google introduced the Physical Web. The general idea behind the physical web was that 
        Bluetooth transmitters could send out an URL that you can access when nearby the beacon.
        The Physical Web was mainly focused on broadcasting user-browserable and interactable websites
        and was implemented in Google Chrome as notifications that would appear when near a beacon.

        Use cases ranged from getting notifications for posters and events that you pass by, so that you could
        open the URL in the notification rather than scanning a QR code on the poster. Interactions with devices
        such as parking meters or smart lights and even on moveable objects such as pets, so their owners could update
        the website whenever their pet was missing.

        The project was shortlived and was removed from iOS and Android in 2017 after the concept was use too much
        for advertising and marketing, rather than providing seamless interactions.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ### BLE Specifications
        ![](images/ble_packet.svg){ width=90% }
    {% endmarkdown %}
    <aside class="notes">
        To quickly jump back a bit to some background information about Bluetooth Low Energy we currently
        have two major versions. BLE 4 and BLE 5. Bluetooth Low Energy can advertise limited amount of information
        that can be picked up by passive receivers.

        In BLE 4 we have an advertisement payload size of maximum 31 bytes. In BLE 5 we can have a maximum payload size of 255 bytes
        which can also be used to contain multiple BLE4 compatible advertisements if needed.

        On top of this, both versions also support active scanning where the receiver sends out a scan requests
        that will trigger the advertising transmitter to send out another advertising PDU. This scan response
        can be different from the advertisement data, giving a total adveritsement size of 62 bytes for Bluetooth Low Energy v4.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ### BLE Specifications ...
        ![](images/uribeacon.svg){ width=100% }

        - Encoded URI to fit within 17 bytes
        - One flag implemented for *invisible hint*
        - Discontinued in favor of Eddystone-URL
    {% endmarkdown %}
    <aside class="notes">
        The Physical Web project was backed by the UriBeacon Bluetooth Low Energy Specification which broadcasted
        useful data such as the URI itself, encoded to be as small as possible. The calibrated signal strength
        at 0 meters so we can approximate the distance to the beacon and finally a set of flags. However,
        only one 'invisibility' flag was implemented in order to indicate if a Phsyical item should be visible to the user.

        It was later discontinued in favor of and Eddystone-URL beacon.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## BLE Specifications ...
        ![](images/eddystone.svg){ width=100% }
    {% endmarkdown %}
    <aside class="notes">
        Eddystone-URL was the new version that replaced UriBeacon. It was part of the Eddystone lineup
        of beacon specifications that included different variants based on the needs of the transmitter.
        It included a specification for telemetry data, encryption of advertisement data, an URL like UriBeacon
        and finally also a unique identifier that consisted of a 10 byte namespace and 6 byte instance identifier.

        The type of specification is determined by the 'frame type' byte which replaced the flags byte in UriBeacon. In the case 
        of the UID frame, a Google Cloud Service such as the Beacon API or Place API can be used to link the UID to additional information
        such as its location. However, this limits the use for the beacon to proprietary applications or requires
        knowledge on the web server that contains this information and the format it uses.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## BLE Specifications ...
        ![](images/ibeacon.svg){ width=100% }
        ![](images/altbeacon.svg){ width=100% }
    {% endmarkdown %}
    <aside class="notes">
        If we look more towards specifications that could be used for positioning and tracking our physical things, iBeacon
        and AltBeacon are two popular specifications that are commonly used in indoor positioning systems. Instead of advertising a service,
        the use manufacturer specific data to include the required information. This includes the calibrated signal strength
        at 1m distance that can be used to determine the distance, a 128 bit proximity unique identifier
        and major and minor classification.

        Invented by Apple, the iBeacon specification recommends that companies use the same UUID per application and the major
        minor classification to indicate the spatial region. In iOS it is even impossible to detect iBeacons without providing
        an UUID, which limits the use of iBeacon to proprietary positioning systems or hardware.

        To solve this particular issue, AltBeacon was created by Radius Networks which does not require to use the Apple manufacturer
        identifier, has an extra 1 byte that can be implemented by manufacturers for more specific data and
        officially has a 20 byte beacon identifier. However, due to backwards compatibility this 20 byte identifier
        is usually implemented similarly to iBeacon with a proximity uuid.
    </aside>
</section>

<section data-markdown class="flags">
    <style>
        section.flags table {
            font-size: 80%;
        }
    </style>
    {% markdown %}
        ## BLE Specifications ...
        ![](images/bluetooth_ips.svg){ width=100% }
        | **Bit (MSB)** | **Description** |
        |---|---|
        | 0 | Presence of coordinates in advertising packet |
        | 1 | Coordinate system used (WGS84 or *local*) |
        | 2 | Presence of TX Power field in advertising packet |
        | 3 | Presence of Altitude field in advertising packet |
        | 4 | Presence of Floor Number in advertising packet |
        | 5 | Presence of Uncertainty in advertising packet |
        | 6 | Location Name avaiable in GATT database |
    {% endmarkdown %}
    <aside class="notes">
        T Bluetooth Special interest group has created its own specification for broadcasting a position. It supports both the 
        global WGS84 latitude and longitude along with a local coordinate, transmission power and additional flags of
        data that is available after performing a connection to the bluetooth device.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## SemBeacon Solution
        ![](images/architecture_overview.svg){ width=30% }
    {% endmarkdown %}
    <aside class="notes">
        The basic principle of our semantic beacon solution called SemBeacon is a Bluetooth Low Energy beacon that
        advertises two identifiers and a set of flags. Compatible applications can retrieve an additional
        URI that redirects to semantic linked data on the Web containing more information about the beacon, its position and environment.

        Our solution and contribution includes both the bluetooth adveritsement protocol, the semantic description and vocabulary and
        how the semantic data, identifiers and flags contribute to the usability of the SemBeacons for indoor positioning, device discovery
        and eventually the interaction with the device.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## SemBeacon Solution ...
        ### BLE 4.X
        ![SemBeacon specification for BLE v4.x](./images/specification_BLE4.svg){ width=80% }
    {% endmarkdown %}
    <aside class="notes">
        Our main solution in general consists of an AltBeacon advertisement with a namespace and instance identifier
        as its beacon identifier, a set of flags which we will discuss in a moment and an Eddystone-URL compatible scan response.
        It is the combination of the advertisement data along with the eddystone-url scan response that makes up SemBeacon.
    </aside>
</section>

<section data-markdown class="flags">
    <style>
        section.flags table {
            font-size: 80%;
        }
    </style>
    {% markdown %}
        ## SemBeacon Solution ...
        ### Flags
        Based on UriBeacon, Bluetooth IPS and Eddystone frames

        | **Bit (MSB)** | **Description** | **Example** |
        |---|---|---|
        | 0 | Indicates if the beacon has a position. | 0 = Unsure, 1 = Yes |
        | 1 | Indicates if the beacon is private. | 0 = Public, 1 = Private |
        | 2 | Indicates if the beacon is attached to a moving object. | 0 = No, 1 = Yes |
        | 3 | Indicates if the beacon has a positioning system. | 0 = No, 1 = Yes |
        | 4 | Indicates if the beacon has telemetry data. | 0 = No, 1 = Yes |
        | 5 - 7 | *Reserved for future use.* ||
    {% endmarkdown %}
    <aside class="notes">
        Our flags are based on the invisibility flag of UriBeacon and its use cases, the flags and data of the Bluetooth IPS
        service and finally the use cases of the Eddystone frames. These flags should be configured when setting up a device and
        do not offer any dynamic information. 


    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## SemBeacon Solution ...
        ### Namespace and Instance Identifier
        ![](images/identifier_example.svg){ width=100% }
    {% endmarkdown %}
    <aside class="notes">
        
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## SemBeacon Solution ...
        ### BLE 5.X (Work in Progress)
        ![SemBeacon specification for BLE v5.x](./images/specification_BLE5.svg){ width=80% }
    {% endmarkdown %}
    <aside class="notes">
        In addition to our backwards compatible BLE 4 advertisement we also have a work in progress BLE 5 advertisement specification.
        With the increased payload size for BLE 5 advertisements we can include both the namespace and instance identifiers and uri
        within a single advertisement.

        As we no longer have to ensure Eddystone-URL compatibility, we also extended the encoding for the the URI to enable
        a smaller payload for common linked data URIs, versioning, and a larger URI in general which could negate the need for 
        URL shorteners.

        BLE 5 advertisements offer better range compared to legacy BLE 4 advertisements which is useful for positioning. Our arduino
        library already offers the capabilities to use this new service on newer BLE 5 compatible ESP32 hardware for both scanning
        and advertising. However, our mobile application currently does not scan for BLE 5 advertisements yet.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## SemBeacon Solution ...
        ### Ontology and POSO Extension
        
    {% endmarkdown %}
    <aside class="notes">
        In 2022 we released the Generic Positioning System Ontology

        Our extension to POSO is 
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## Demonstrator
        ![](images/coverage_map.svg)
        <small>- M. Van de Wynckel & B. Signer, OpenHPS Single Floor Dataset (2021)</small>
    {% endmarkdown %}
    <aside class="notes">
        In order to test and demonstrate the capabilities of SemBeacon we tested it in a real world
        scenario. For our test we based ourselves on a previously recorded indoor positioning dataset
        from 2021 that we recorded in the building of our lab. Back then, indoor positioning using the deployed
        beacons required an internal database within the application in order to perform multilateration.

        We first converted the dataset to semantic data using the POSO ontology.
    </aside>
</section>
<section data-markdown>
    {% markdown %}
        ## Demonstrator ...
        <code>https://sembeacon.org/examples/openhps2021/beacons.ttl</code>
        ```turtle
        :pl9_3_lobby_1 a schema:Place, ssn:Deployment, sosa:FeatureOfInterest, ogc:SpatialObject;
            ogc:hasGeometry [
                a ogc:Geometry;
                ogc:asWKT "POLYGON Z((4.392281317197596 50.82061024217639 92, 4.39223788808538 50.82065085654958 92, 4.392153959019106 50.82061503844629 92, 4.392197388204323 50.8205744240731 91.99999999906868, 4.392281317197596 50.820610242176386 94.99999999906868, 4.392237888085379 50.82065085654958 95, 4.392153959019106 50.82061503844629 95, 4.392197388204322 50.8205744240731 94.99999999906868, 4.392281317197596 50.82061024217639 92))"^^ogc:wktLiteral;
                ogc:coordinateDimension 3;
                ogc:spatialDimension 3;
                ogc:dimension 3
            ];
            rdfs:label "Lobby #1";
            dcmi:created "2023-06-22T21:12:23.585Z"^^xsd:dateTime.
        :pl9_3_lobby_2 a schema:Place, ssn:Deployment, sosa:FeatureOfInterest, ogc:SpatialObject;
            ogc:hasGeometry [
                a ogc:Geometry;
                ogc:asWKT "POLYGON Z((4.392530671545053 50.820691696024596 92, 4.392512343770305 50.82070883604012 92.00000000093132, 4.392448113920621 50.820681425129145 92, 4.392466441718948 50.820664285113615 91.99999999906868, 4.392530671545053 50.820691696024596 95, 4.3925123437703055 50.82070883604012 95.00000000093132, 4.392448113920621 50.820681425129145 94.99999999906868, 4.392466441718948 50.82066428511362 95.00000000093132, 4.392530671545053 50.820691696024596 92))"^^ogc:wktLiteral;
                ogc:coordinateDimension 3;
                ogc:spatialDimension 3;
                ogc:dimension 3
            ];
            rdfs:label "Lobby #2";
            dcmi:created "2023-06-22T21:12:23.586Z"^^xsd:dateTime.


        :BEACON_08 a sosa:FeatureOfInterest, ogc:SpatialObject, poso:RFLandmark, poso:BluetoothBeacon, sembeacon:SemBeacon;
            rdfs:label "BEACON_08";
            dcmi:created "2023-06-22T21:12:23.637Z"^^xsd:dateTime;
            poso:hasPosition [
                a geo:Point, poso:AbsolutePosition;
                ogc:asWKT "POINT Z(4.392253994600526 50.82057562786381 93.5999999962747)"^^ogc:wktLiteral;
                ogc:coordinateDimension 3;
                ogc:spatialDimension 3;
                ogc:dimension 3;
                dcmi:created "2023-06-22T21:12:23.638Z"^^xsd:dateTime;
                schema:latitude "50.82057562786381"^^xsd:double;
                schema:longitude "4.392253994600526"^^xsd:double;
                schema:elevation "93.5999999962747"^^xsd:double
            ];
            posoc:hasReferenceRSSI [
                a poso:RelativeSignalStrength;
                poso:hasRSS [
                        a qudt:QuantityValue;
                        qudt:unit unit:DeciB_M;
                        qudt:numericValue -56
                ];
                poso:hasRelativeDistance [
                    a qudt:QuantityValue;
                    qudt:unit unit:M;
                    qudt:numericValue 1
                ]
            ];
            hardware:macAddress "f7:5c:38:a4:45:ec";
            ogc:sfWithin :pl9_3_corridor;
            sembeacon:namespace :pl9_3;
            sembeacon:shortResourceURI "https://bit.ly/3JsEnF9"^^xsd:anyURI;
            sembeacon:instanceId "c187d748"^^xsd:hexBinary.
        ```
    {% endmarkdown %}
    <aside class="notes">

    </aside>
</section>
<section data-markdown>
    {% markdown %}
        ## Demonstrator ...
        ### Mobile Application
        - **Scans** for iBeacon, AltBeacon, Eddystone and SemBeacon
        - **Downloads**, extracts and visualises SemBeacon information
        - Visualises iBeacon, AltBeacon or Eddystone beacons with knowing location
        from previously extracted semantic data
        - Implements HTTP caching and namespace mapping to environments
    {% endmarkdown %}
    <aside class="notes">

    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## Example
        ```turtle
        @prefix :          <http://sembeacon.org/example.ttl#> .
        @prefix hardware:  <http://w3id.org/devops-infra/hardware#> .
        @prefix poso:      <http://purl.org/poso/> .
        @prefix posoc:     <http://purl.org/poso/common/> .
        @prefix sembeacon: <http://purl.org/sembeacon/> .
        @prefix qudt:      <http://qudt.org/schema/qudt/> .
        @prefix unit:      <http://qudt.org/vocab/unit/> .

        :building_a a ssn:Deployment ;
            rdfs:label "Building A" ;
            sembeacon:namespaceId "e19c5e1ed6a14d..."^^xsd:hexBinary .

        :room_a1_2 a sembeacon:SemBeacon ;
            rdfs:label "SemBeacon Room A1.2"@en ;
            rdfs:isDefinedBy <http://sembeacon.org/example.ttl#> ;
            sembeacon:namespace :building_a ;
            sembeacon:instanceId "beac0101"^^xsd:hexBinary ;
            hardware:mac "00:11:22:33:44:55" ;
            posoc:referenceRSSI [ # Reference RSSI is a ...
                # ... factory calibrated signal strength
                poso:hasRSS [ 
                    qudt:unit unit:DeciB_M ; qudt:numericValue -56 ] ;
                # ... measured at a specific distance
                poso:hasRelativeDistance [ 
                    unit:Meter ; qudt:value "1.0"^^xsd:double ] .
            ] ;
            poso:hasPosition [ a poso:AbsolutePosition ;
                poso:hasAccuracy [ ... ] ; poso:xAxisValue [ ... ] ;
                poso:yAxisValue [ ... ] ; poso:zAxisValue [ ... ] ] .
        ```
    {% endmarkdown %}
</section>

<section data-markdown>
    {% markdown %}
        ## Supplemental Material
        - Android Application to scan and broadcast SemBeacons
        - Arduino ESP32 Library to advertise SemBeacon
        - Native Android library extension to identify SemBeacons
        - TypeScript library to create and detect SemBeacons
    {% endmarkdown %}
    <aside class="notes">
        In order to test our beacons and also to ensure an easy adoption rate, we
        released several open source tools as supplemental material. We released
        an android application to scan and broadcast beacons used in our
        demonstrator, an Arduino library, a native Android library extension
        to the popular AltBeacon beacon scanner library and finally
        also a typescript library to create and detect SemBeacons in Ionic Capacitor.
    </aside>
</section>


<section data-markdown>
    {% markdown %}
        ## Conclusion and Future Work
        - We presented our semantic beacon solution called SemBeacon
        - Expanding to non-BLE beacons (e.g. Ultrawide-band)
        - Expanding the vocabulary to facilitate device interactions
        - Web Bluetooth Scanning for SemBeacons
    {% endmarkdown %}
    {% qr "https://sembeacon.org", "qr-image", "H" %}
    <ul class="info">
        <li><i class="fa-brands fa-github"></i> <a href="https://github.com/SemBeacon/">https://github.com/SemBeacon/</a></li>
        <li><i class="fa-solid fa-book"></i> <a href="https://sembeacon.org/">https://sembeacon.org/</a></li>
    </ul>
    <style>
    .qr-image {
        position: absolute;
        left: 0em;
        bottom: 1em;
        width: 300px;
        height: 300px;
        float: right;
    }
    ul.info {
        font-size: 1.1em;
        position: absolute;
        left: 300px;
        bottom: 125px;
        list-style-type: none;
    }
    ul.info li i {
        width: 50px;
    }
    ul.info li::before {
        content: none;
    }
    </style>
    <aside class="notes">
        
    </aside>
</section>   