---
layout: layouts/presentation.njk
title: "SemBeacon: A Semantic Proximity Beacon Solution for Discovering and Detecting the Position of Physical Things"
presentation_title: "SemBeacon: A Semantic Proximity Beacon Solution for Discovering and Detecting the Position of Physical Things"
author: <u>Maxim Van de Wynckel</u>, Beat Signer
affiliation: Web & Information Systems Engineering Lab</br>Vrije Universiteit Brussel
logo: true
width: 1280
height: 720
---
{% decktape title, page %}

<!--
    Hello, my name is Maxim Van de Wynckel. I am a PhD candidate at the Web and Information Systems
    engineering lab at the Vrije Universiteit Brussel. Today I will be presenting our paper,
    'SemBeacon: A semantic proximity beacon solution for discovering and detecting the position of physical things'
-->

<section data-markdown data-timing="25">
    {% markdown %}
        ## Overview
        *"A Physical Thing is an abstraction of a **physical** entity that provides **interactions** to and participates in the Web of Things"* \
        <small>- W3C Web of Things (WoT) Thing Description 1.1</small>
        ![](./images/layers2.svg){ width=35% }
    {% endmarkdown %}
    <aside class="notes">
         To give a brief overview of where we situate physical things within the domain of internet of things. The world wide
         web concortium describes a physical 'Thing' as an abstraction of a phsyical entity that provides interactions "to"
         and participates "in" the web of things. The web of things as a concept on itself is situated within the domain of 
         the internet of things and primarily communicates over HTTP.
    </aside>
</section>

<section data-markdown data-timing="35">
    {% markdown %}
        ## Problem Statement
        <div style="text-align: center; margin-top: 5em;">
            <h3 style="font-style: italic;">"How to discover and track Physical Things indoors?"</h3>
            <h3 style="font-style: italic;">"How to provide context to Physical Things?"</h3>
            <h4 style="font-style: italic;">"How to get this context to the user?"</h4>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        When we strictly talk about physical things that we can interact with and thus have a location within
        the physical world, we have two problems. Mainly, that we should somehow discover these physical devices and 
        track their location so we can also physically interact with them when needed. Discovering a physical device is
        more than simply knowing that it exist. In order to do so we also need a way to provide context to places.

        In general this is an easy problem to solve, simply providing contextual location information to physical objects.
        But getting this context to the user often requires proprietary applications or services.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## Related Work
        <div class="row" style="margin-top: 2em">
            <div class="col-4">
                <img src="images/hpcooltown.jpg" width="95%">
                <small>- HP CoolTown Beacon (2000) [26]</small>
            </div>
            <div class="col-7">
                <img src="images/lee2017.jpg" width="100%">
                <small>- Location-based service using ontology-based semantic queries (2017) [18]</small>
            </div>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        If we look at existing solutions to this problem in the scope of the Web of Things we often found solutions
        that rely on a predefined method of centralisation such as a web service or knowledge database. But even then,
        tracking its location within an complex environment such as indoors is not fully discussed.

        If we look back at the early 2000's, Hewelett Packard started the CoolTown project. Part of this project was the creation of
        URI beacons which were infrared transmitters of uniform resource identifiers. This URI would then lead to an XML description
        of the location or place or "Thing". Despite the hardware limitations back in the day, this solution tries to solve
        our problem by putting the description online and transmitting this to the user. However, the XML vocabulary
        was specific to the CoolTown project and only one URI was used to describe the place.

        Other examples that more closely resemble the problem we are trying to solve use an object relational
        database system on the web that can be accessed by mobile clients. These clients can query the database to retrieve
        geospatial information about the environment which can be used to offer indoor positioning.
        While these solutions offer the ability to create interoperable applications, especially when used with common vocabularies --
        it still requires knowledge on the location of the server. If we would make an open world assumption where these geometry
        and topology models are decentralised, we would require large semantic queries over unknown multiple servers, which is currently
        a huge bottleneck in linked data.
    </aside>
</section>
<section data-markdown>
    {% markdown %}
        ## <span class="light">Related Work <i class="fa-solid fa-chevron-right"></i></span> Physical Web
        <div class="row" style="margin-top: 2em">
            <div class="col-8">
                <img src="images/physicalweb_architecture.png" width="100%">
                <small>- Manfred Sneps-Sneppe, Dmitry Namiot, "On Physical Web models" (2016)</small>
            </div>
            <div class="col-4">
                <img src="images/physicalweb_examples.png" width="100%">
            </div>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        In 2014, Google introduced the Physical Web. The general idea behind the physical web was that 
        Bluetooth transmitters could send out an URL that you can access when nearby the beacon.
        The Physical Web was mainly focused on broadcasting user-browserable and interactable websites
        and was implemented in Google Chrome as notifications that would appear when near a beacon.

        Use cases ranged from getting notifications for posters and events that you pass by, so that you could
        open the URL in the notification rather than scanning a QR code on the poster. Interactions with devices
        such as parking meters or smart lights and even on moveable objects such as pets, so their owners could update
        the website whenever their pet was missing.

        The project was shortlived and was removed from iOS and Android in 2017 after the concept was use too much
        for advertising and marketing, rather than providing seamless interactions.
    </aside>
</section>

<section data-markdown data-visibility="uncounted">
    {% markdown %}
        ## Bluetooth Low Energy (BLE)
        ![](images/ble_packet.svg){ width=90% }
    {% endmarkdown %}
    <aside class="notes">
        The technology behind the Physical web as Bluetooth low energy which currently has two major versions. 
        BLE 4 and BLE 5. Bluetooth Low Energy can advertise limited amount of information
        that can be picked up by passive receivers.

        In BLE 4 we have an advertisement payload size of maximum 31 bytes. In BLE 5 we can have a maximum payload size of 255 bytes
        which can also be used to contain multiple BLE4 compatible advertisements if needed.

        On top of this, both versions also support active scanning where the receiver sends out a scan requests
        that will trigger the advertising transmitter to send out another advertising PDU. This scan response
        can be different from the advertisement data, giving a total adveritsement size of 62 bytes for Bluetooth Low Energy v4.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">Bluetooth Low Energy (BLE) <i class="fa-solid fa-chevron-right"></i></span> Positioning
        ![](images/ble_positioning.svg){ width=80% }
    {% endmarkdown %}
    <aside class="notes">
       If we want to solve our use case of tracking our physical things with Bluetooth low energy, we currently can already
       solve this by uniquely identifying the beacons and mapping these unique beacons to a local or cloud based database
       that provides more context to the user. However, one of the main issues that this imposes is that this
       requires a proprietary application that either includes a database or knows which cloud service can provide a location.
    </aside>
</section>

<section data-markdown data-visibility="uncounted">
    {% markdown %}
        ## <span class="light">BLE Specifications <i class="fa-solid fa-chevron-right"></i></span> UriBeacon
        ![](images/uribeacon.svg){ width=100% }

        - Encoded URI to fit within 17 bytes
        - One flag implemented for *invisible hint*
        - Discontinued in favor of Eddystone-URL
    {% endmarkdown %}
    <aside class="notes">
        The Physical Web project was backed by the UriBeacon Bluetooth Low Energy Specification which broadcasted
        useful data such as the URI itself, encoded to be as small as possible. The calibrated signal strength
        at 0 meters so we can approximate the distance to the beacon and finally a set of flags. However,
        only one 'invisibility' flag was implemented in order to indicate if a Phsyical item should be visible to the user.

        It was later discontinued in favor of and Eddystone-URL beacon.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">BLE Specifications <i class="fa-solid fa-chevron-right"></i></span> Eddystone
        ![](images/eddystone.svg){ width=100% }
    {% endmarkdown %}
    <aside class="notes">
        One of the possible specifications to identify the beacons is Eddystone-UID which contains a 10 byte namespace 
        and 6 byte instance identifier. A Google Cloud Service such as the Beacon API or Place API would be used to link the 
        UID to additional information such as its location.

        Eddystone-URL was the Bluetooth specification behind the physical web. It was part of the Eddystone lineup
        of beacon specifications that included different variants based on the needs of the transmitter. The URL was
        short, only 17 bytes encoded, which often required a URL shortener. The reason for this is because a BLE advertisements
        can only be 31 bytes long in total, which can optionally be doubled using a scan response that is send after receiving a
        scan request.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">BLE Specifications <i class="fa-solid fa-chevron-right"></i></span> iBeacon & AltBeacon
        ![](images/ibeacon.svg){ width=100% }
        ![](images/altbeacon.svg){ width=100% }
    {% endmarkdown %}
    <aside class="notes">
        Other specifications used for proximity estimation, positioning and tracking include iBeacon
        and AltBeacon which are two popular specifications that are commonly used in indoor positioning systems. Instead of 
        advertising a service, the use manufacturer specific data to include the required information. This includes the calibrated signal strength
        at 1m distance that can be used to determine the distance, a 128 bit proximity unique identifier
        and major and minor classification.

        Invented by Apple, the iBeacon specification recommends that companies use the same UUID per application and the major
        minor classification to indicate the spatial region. In iOS it is even impossible to detect iBeacons without providing
        an UUID within the application, which limits the use of iBeacon to applications that are aware of the used identifier 
        within a building.

        To solve this particular issue, AltBeacon was created by Radius Networks which does not require to use the Apple manufacturer
        identifier, has an extra 1 byte that can be implemented by manufacturers for more specific data and
        officially has a 20 byte beacon identifier. However, due to backwards compatibility this 20 byte identifier
        is usually implemented similarly to iBeacon with a proximity uuid and major and minor classification.
    </aside>
</section>

<section data-markdown class="flags" data-visibility="uncounted">
    <style>
        section.flags table {
            font-size: 80%;
        }
    </style>
    {% markdown %}
        ## <span class="light">BLE Specifications <i class="fa-solid fa-chevron-right"></i></span> Bluetooth IPS
        ![](images/bluetooth_ips.svg){ width=100% }
        | **Bit (MSB)** | **Description** |
        |---|---|
        | 0 | Presence of coordinates in advertising packet |
        | 1 | Coordinate system used (WGS84 or *local*) |
        | 2 | Presence of TX Power field in advertising packet |
        | 3 | Presence of Altitude field in advertising packet |
        | 4 | Presence of Floor Number in advertising packet |
        | 5 | Presence of Uncertainty in advertising packet |
        | 6 | Location Name avaiable in GATT database |
    {% endmarkdown %}
    <aside class="notes">
        The Bluetooth Special interest group has created its own specification for broadcasting a position. It supports both the 
        global WGS84 latitude and longitude along with a local coordinate, transmission power and additional flags of
        data that is available after performing a connection to the bluetooth device.

        However, it is unclear what the local coordinate indicates and more contextual information has to be
        encoded within the beacon after connection. 
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## SemBeacon
        ![](images/sembeacon_architecture_large.svg){ width=90% }
    {% endmarkdown %}
    <aside class="notes">
        The basic principle of our semantic beacon solution called SemBeacon is a Bluetooth Low Energy beacon that
        advertises two identifiers and a set of flags. Compatible applications can then ask to retrieve an additional
        URI that redirects to semantic linked data on the Web containing more information about the beacon, its position and environment.

        In our semantic data we can make use of existing and extended vocabularies such as the generic positioning system ontology,
        Geosparql, sensors and observations ontology and the IoT-lite ontology.

        Our solution and contribution includes both the bluetooth adveritsement protocol, the semantic description and vocabulary and
        how the semantic data, identifiers and flags contribute to the usability of the SemBeacons for indoor positioning, device discovery
        and eventually the interaction with the device.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">SemBeacon <i class="fa-solid fa-chevron-right"></i></span> Bluetooth Specification
        ### BLE 4.X
        ![SemBeacon specification for BLE v4.x](./images/specification_BLE4.svg){ width=80% }
    {% endmarkdown %}
    <aside class="notes">
        Our main solution in general consists of an AltBeacon advertisement with a namespace and instance identifier, a set of flags 
        which we will discuss in a moment and an Eddystone-URL compatible scan response.
        It is the combination of the advertisement data along with the eddystone-url scan response that makes up SemBeacon.

        Similar to Eddystone-URL we perform encoding of the short URI without further extensions in order to prevent
        backwards compatibility with existing libraries that can scan for Eddstone.
    </aside>
</section>

<section data-markdown class="flags">
    <style>
        section.flags table {
            font-size: 80%;
        }
    </style>
    {% markdown %}
        ## <span class="light">SemBeacon <i class="fa-solid fa-chevron-right"></i></span> Bluetooth Specification
        ### Flags
        Based on UriBeacon, Bluetooth IPS and Eddystone frames

        | **Bit (MSB)** | **Description** | **Example** |
        |---|---|---|
        | 0 | Indicates if the beacon has a position. | 0 = Unsure, 1 = Yes |
        | 1 | Indicates if the beacon is private. | 0 = Public, 1 = Private |
        | 2 | Indicates if the beacon is attached to a moving object. | 0 = No, 1 = Yes |
        | 3 | Indicates if the beacon has a positioning system. | 0 = No, 1 = Yes |
        | 4 | Indicates if the beacon has telemetry data. | 0 = No, 1 = Yes |
        | 5 - 7 | *Reserved for future use.* ||
    {% endmarkdown %}
    <aside class="notes">
        Our flags are based on the invisibility flag of UriBeacon and its use cases, the flags and data of the Bluetooth IPS
        service and finally the use cases of the Eddystone frames. These flags should be configured when setting up a device and
        do not offer any dynamic information. 

        For example, the position flag would be set to 1 when, during the installation it is clear the beacon will
        have a fixed position, which would be the case when mounted on wall. Similarly we have other flags that can be decided
        on during initial setup based on the use case for the SemBeacon.

        We introduced these flags in order to still provide applications with context on the type of beacon without requiring
        them to perform an HTTP request. For example, an application that only aims to navigate within a building should
        not access moveable objects without a position, as these will not be useful.
    </aside>
</section>


<section data-markdown>
    {% markdown %}
        ## <span class="light">SemBeacon <i class="fa-solid fa-chevron-right"></i></span> Bluetooth Specification
        ### BLE 5.X (Work in Progress)
        ![SemBeacon specification for BLE v5.x](./images/specification_BLE5.svg){ width=80% }
    {% endmarkdown %}
    <aside class="notes">
        In addition to our backwards compatible BLE 4 advertisement we also have a work in progress BLE 5 advertisement specification.
        With the increased payload size for BLE 5 advertisements we can include both the namespace and instance identifiers and uri
        within a single advertisement.

        As we no longer have to ensure Eddystone-URL compatibility, we also extended the encoding for the the URI to enable
        a smaller payload for common linked data URIs, versioning, and a larger URI in general which could negate the need for 
        URL shorteners.

        BLE 5 advertisements offer better range compared to legacy BLE 4 advertisements which is useful for positioning. Our arduino
        library already offers the capabilities to use this new service on newer BLE 5 compatible ESP32 hardware for both scanning
        and advertising. However, our mobile application currently does not scan for BLE 5 advertisements yet.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">SemBeacon <i class="fa-solid fa-chevron-right"></i></span> Namespace and Instance
        ![](images/identifier_example.svg){ width=100% }
    {% endmarkdown %}
    <aside class="notes">
        Identification of SemBeacons is an important aspect to prevent the need to contact a web server every
        time a new SemBeacon is detected that is already known. We split up the identification in a 16 byte namespace
        uuid that would be equal to a proximity uuid and we combine the remaining 4 bytes to a single instance identifier.
        In our specification we recommend that the Base URI is functionally dependant on the namespace id which in this example we
        did by hashing the URI.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">SemBeacon <i class="fa-solid fa-chevron-right"></i></span> POSO Extension
        <img src="images/sembeacon_ontology.svg" width="100%" style="margin-top: 2em">
    {% endmarkdown %}
    <aside class="notes">
        In 2022 we released the Generic Positioning System Ontology which uses the Sensors Observations,
        Systems and Actuators ontology (sosa for short) behind the scene. For our SemBeacon solution we have extended POSO
        with additional bluetooth beacon "landmarks", reference signal strength and other information which is
        relevant for beacons.

        Being built on top of SOSA it allows for a lot of extensions to describe sensor data as well as possible actuations
        with the physical things.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">SemBeacon <i class="fa-solid fa-chevron-right"></i></span> Device Interactions
        #### M. Bermudez-Edo, T. Elsaleh et al. "IoT-Lite Ontology", November 2015
        <img src="images/iot-lite-instance.png" width="65%">
    {% endmarkdown %}
    <aside class="notes">
        One of the possible extensions to the vocabulary is the use of the IoT-lite ontology by the
        University of Surrey which offers the ability to describe IoT services and endpoints. This way, smart
        devices are not required to operate on the semantic web but can use the semantic web to describe
        how applications should interact with the device.
    </aside>
</section>

<section data-markdown data-visibility="uncounted">
    {% markdown %}
        ## <span class="light">SemBeacon <i class="fa-solid fa-chevron-right"></i></span> Method of Discovery
        <div class="row" style="margin-top: 2em">
            <div class="col-5">
                <img src="images/example_state.svg" width="100%">
            </div>
            <div class="col-7">
                {% markdown %}
                    ```turtle
                    :pl9_3 a ssn:Deployment ;
                        rdfs:label "PL9.3"@en ;
                        sembeacon:namespaceId "77f340dbac0d..."^^xsd:hexBinary .

                    :BEACON_08 a sembeacon:SemBeacon ;
                        sembeacon:namespace :pl9_3 ;
                        sembeacon:instanceId "c187d748"^^xsd:hexBinary ;
                        poso:hasPosition [ a ogc:Geometry ;
                            ogc:asWKT "POINT Z(...)"^^ogc:wktLiteral ] .

                    :BEACON_07 a sembeacon:SemBeacon ;
                        sembeacon:namespace :pl9_3 ;
                        sembeacon:instanceId "00cc38e7"^^xsd:hexBinary ;
                        poso:hasPosition [ a ogc:Geometry ;
                            ogc:asWKT "POINT Z(...)"^^ogc:wktLiteral ] .

                    :BEACON_02 a posoc:iBeacon ;
                        sembeacon:namespace :pl9_3 ;
                        posoc:proximityUUID "77f340dbac0d..."^^xsd:hexBinary ;
                        posoc:major 50174 ; posoc:minor 64267 ;
                        poso:hasPosition [ a ogc:Geometry ;
                            ogc:asWKT "POINT Z(...)"^^ogc:wktLiteral ] .
                    ```
                {% endmarkdown %}
            </div>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        Discovering a SemBeacon is one of the key areas we wanted to focus on. First of all we wanted to
        make sure that previously seen SemBeacons can be identified without requiring an online fetch of information.
        Next we also wanted to make sure that it can provide the online information when needed and last but not least, we
        also wanted to hierarchically group them.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">Demonstrator <i class="fa-solid fa-chevron-right"></i></span> Dataset & Recreation
        <div class="row" style="margin-top: 2em">
            <div class="col-5">
                <img src="images/coverage_map.svg" width="100%">
                <small>- M. Van de Wynckel & B. Signer, OpenHPS Single Floor Dataset (2021)</small>
            </div>
            <div class="col-7">
                <img src="images/example_building.svg" width="100%">
            </div>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        In order to test and demonstrate the capabilities of SemBeacon we tested it in a real world
        scenario. For our test we based ourselves on a previously recorded indoor positioning dataset
        from 2021 that we recorded in the building of our lab. Back then, indoor positioning using the deployed
        beacons required an internal database within the application in order to perform multilateration.

        The primary focus of our dataset transformation consisted of transforming the geojson descriptors of the environment 
        as well as the information of beacons. 

        We first converted the dataset to semantic data using the POSO ontology after which we repositioned the beacons
        in the same building. However, this time around we also added two SemBeacons near the entrance of the floor that
        would provide all the contextual information about the floor.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">Demonstrator <i class="fa-solid fa-chevron-right"></i></span> Transformation 
        ### https://sembeacon.org/examples/openhps2021/beacons.ttl
        ```turtle
        :BEACON_08 a sosa:FeatureOfInterest, ogc:SpatialObject, poso:RFLandmark, 
                poso:BluetoothBeacon, sembeacon:SemBeacon;
            rdfs:label "BEACON_08";
            poso:hasPosition [ a geo:Point, poso:AbsolutePosition;
                ogc:asWKT "POINT Z(4.392253994600526 50.82057562786381 93.5999999962747)"^^ogc:wktLiteral;
                ogc:coordinateDimension 3; ogc:spatialDimension 3; ogc:dimension 3;
                schema:latitude "50.82057562786"^^xsd:double; schema:longitude "4.392253994600"^^xsd:double;
                schema:elevation "93.5999999962"^^xsd:double ];
            posoc:hasReferenceRSSI [
                poso:hasRSS [ a qudt:QuantityValue;
                        qudt:unit unit:DeciB_M;
                        qudt:numericValue -56 ];
                poso:hasRelativeDistance [ a qudt:QuantityValue;
                    qudt:unit unit:M;
                    qudt:numericValue 1 ]];
            hardware:macAddress "f7:5c:38:a4:45:ec";
            ogc:sfWithin :pl9_3_corridor;
            sembeacon:namespace :pl9_3;
            sembeacon:shortResourceURI "https://bit.ly/3JsEnF9"^^xsd:anyURI;
            sembeacon:instanceId "c187d748"^^xsd:hexBinary.
        ```
    {% endmarkdown %}
    <aside class="notes">
        In the transformed dataset we have an elaborate description of the beacons, including their
        reference signal at a specified distance, mac address, position, geospatial location within a Deployment
        and finally the namespace and instance identifiers.
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## <span class="light">Demonstrator <i class="fa-solid fa-chevron-right"></i></span> Transformation 
        ### https://sembeacon.org/examples/openhps2021/beacons.ttl
        ```turtle
        :pl9_3 a ssn:Deployment, sosa:FeatureOfInterest, ogc:SpatialObject, schema:Accommodation, seas:Floor;
            ogc:hasGeometry [ a ogc:Geometry;
                ogc:asWKT "POLYGON Z((4.3926809491 50.82056 92, 4.3925189891 50.820491195 92, 
                    4.3924384904 50.820566477 92, 4.3923227711 50.820517092 92, 4.3924032699 50.820441810 92, 
                    4.3922413107 50.820372691 92, 4.3918880594 50.820703046 92, 4.3920500197 50.820772165 92, 
                        ...
                    4.3921796702 50.820650918 95, 4.3922953899 50.820700303 95, 4.3921657397 50.820821550 95, 
                    4.3923277009 50.820890669 95, 4.3926809491 50.820560314 92))"^^ogc:wktLiteral;
                ogc:coordinateDimension 3; ogc:spatialDimension 3; ogc:dimension 3 ];
            rdfs:label "PL9.3";
            sembeacon:namespaceId "77f340dbac0d20e8aa3af656a29f236c"^^xsd:hexBinary .
        :pl9_3_lobby_1 a schema:Place, ssn:Deployment, sosa:FeatureOfInterest, ogc:SpatialObject;
            ogc:hasGeometry [ a ogc:Geometry;
                ogc:asWKT "POLYGON Z((4.392281317197596 50.82061024217639 92, 
                    4.39223788808538 50.82065085654958 92, 4.392153959019106 50.82061503844629 92, 
                    4.392197388204323 50.8205744240731 92, 4.392281317197596 50.820610242176386 94,
                    4.392237888085379 50.82065085654958 95, 4.392153959019106 50.82061503844629 95, 
                    4.392197388204322 50.8205744240731 94, 
                    4.392281317197596 50.82061024217639 92))"^^ogc:wktLiteral;
                ogc:coordinateDimension 3; ogc:spatialDimension 3; ogc:dimension 3 ];
            rdfs:label "Lobby #1" .
        ```
    {% endmarkdown %}
    <aside class="notes">

    </aside>
</section>

<section data-markdown>
    <script>

    </script>
    <style>
        .screenshots {
            margin-top: 1em;
        }
        .screenshots img {
            border-radius: 0.5em;
            box-shadow: 0 0 20px rgba(0,0,0,0.5);
        }
        .fragment.fade-up-slow {
            transform: translate(0,200px);
        }
        .fragment.fade-up-slow.visible {
            transform: translate(0,0);
        }
    </style>
    {% markdown %}
        ## <span class="light">Demonstrator <i class="fa-solid fa-chevron-right"></i></span> Mobile Application
        - **Scans** and **Simulates** SemBeacon, iBeacon, AltBeacon and Eddystone
        - **Extracts** and visualises SemBeacon encoded information
        - Implements HTTP **caching** and namespace mapping to environments
        <div class="row screenshots">
            <div class="col-3">
                <img class="fragment fade-up-slow" data-autoslide="200" src="/images/android-app/Screenshot_20231027_164519_SemBeacon.jpg" width="100%">
            </div>
            <div class="col-3">
                <img class="fragment fade-up-slow" data-autoslide="400" src="/images/android-app/Screenshot_20231027_174719_SemBeacon.jpg" width="100%">
            </div>
            <div class="col-3">
                <img class="fragment fade-up-slow" data-autoslide="600" src="/images/android-app/Screenshot_20231027_164555_SemBeacon.jpg" width="100%">
            </div>
            <div class="col-3">
                <img class="fragment fade-up-slow" data-autoslide="800" src="/images/android-app/Screenshot_20231027_180046_SemBeacon.jpg" width="100%">
            </div>
        </div>
    {% endmarkdown %}
    <aside class="notes">
        Part of our demonstrator included the creation of a demonstrator application that can actually
        scan for SemBeacons, interpret the data and visualise it. If you want to test how SemBeacon
        works you can download the demonstrator to simulate a sembeacon.
    </aside>
</section>

<section data-markdown>
    <style>
        small.supplemental {
            font-size: 80%;
            margin-left: 2em;
            margin-bottom: 1em;
        }
    </style>
    {% markdown %}
        ## Supplemental Material
        - Android Application to scan and broadcast SemBeacons\
            <small class="supplemental">*Created using Ionic Capacitor and @sembeacon/openhps*</small>
        - Arduino ESP32 Library to advertise SemBeacon\
            <small class="supplemental">*Available in the Arduino IDE as "ESP32_SemBeacon"*</small>
        - Android library extension to identify SemBeacons\
            <small class="supplemental">*Using the AltBeacon Beacon Library*</small>
        - TypeScript library to create and detect SemBeacons\
            <small class="supplemental">*Using the OpenHPS framework (@sembeacon/openhps)*</small>
    {% endmarkdown %}
    <aside class="notes">
        In order to test our beacons and also to ensure an easy adoption for using SemBeacon, we
        released several open source tools as supplemental material. We released
        an android application to scan and broadcast beacons used in our
        demonstrator, an Arduino library, a native Android library extension
        to the popular AltBeacon beacon scanner library and finally
        also a typescript library
    </aside>
</section>

<section data-markdown>
    {% markdown %}
        ## Conclusion and Future Work
        - Semantic beacon solution called SemBeacon
        - Backwards compatible, offline identification, scalable
        - Expanding to non-BLE beacons (e.g. Ultrawide-band)
        - Expanding the vocabulary to facilitate device interactions
        - Expanding to Solid Pods to enable the advertising of digital twins
    {% endmarkdown %}
    {% qr "https://sembeacon.org/posts/2023/11/03/", "qr-image", "H" %}
    <ul class="info">
        <li><i class="fa-brands fa-github"></i> <a href="https://github.com/SemBeacon/">https://github.com/SemBeacon/</a></li>
        <li><i class="fa-solid fa-book"></i> <a href="https://sembeacon.org/">https://sembeacon.org/</a></li>
        <li><i class="fa-brands fa-google-play"></i> <a href="https://play.google.com/store/apps/details?id=org.sembeacon">Android App on Google Play Store</a></li>
        <li><i class="fa-solid fa-person-chalkboard"></i> Slides can be found on the website</li>
    </ul>
    <style>
    .qr-image {
        position: absolute;
        left: 0em;
        bottom: 1em;
        width: 300px;
        height: 300px;
        float: right;
    }
    ul.info {
        font-size: 1.1em;
        position: absolute;
        left: 300px;
        bottom: 125px;
        list-style-type: none;
    }
    ul.info li i {
        width: 50px;
    }
    ul.info li::before {
        content: none;
    }
    </style>
    <aside class="notes">
        In this presentation we presented our semantic beacon solution called SemBeacon. It is backwards
        compatible with other standards and also allows the description of other beacons and devices within
        the environment.

        For future work we will definitely be expading the vocabulary to facilitate the modelling
        of device interactions.
    </aside>
</section>   
